const assert = require("assert");
const chromium = require("chrome-aws-lambda");
const puppeteer = require("puppeteer");
const path = require("path");
/**
 * ヘッドレスChromeでPDF作成
 * @param {String} html HTML文字列（外部参照なし）
 * @param {Object} option PDF生成オプション
 * @param {Boolean} isChromium Chromium を使うか。
 */
module.exports = async function (html = null, option = {}, isChromium = false) {
  // 必須チェック
  assert(html !== null, "引数htmlには値が必要。");
  // let fontDirPath = path.join(__dirname, "../fonts/");
  /// NotoColorEmoji.ttf ///////////////////////////////////////////////
  // let emojiFontPath = path.join(fontDirPath, "NotoColorEmoji.ttf");
  // console.log(emojiFontPath);
  // console.log(await chromium.font(emojiFontPath));
  //////////////////////////////////////////////////////////////////////
  /// NotoSansCJKjp-Regular.ttf ////////////////////////////////////////
  // let jpFontPath = path.join(fontDirPath, "NotoSansCJKjp-Regular.ttf");
  // console.log(jpFontPath);
  // gm(tempFilePath).font("./fonts/NotoSansCJKjp-Regular.ttf");
  // console.log(await chromium.font("https://pdfmaker-d4b05.web.app/fonts/NotoSansCJKjp-Regular.ttf"));
  //////////////////////////////////////////////////////////////////////
  // let exePath = await chromium.executablePath;
  // console.log(exePath);
  let browser = await puppeteer.launch({
    args: [
      "--lang=ja",
      "--disable-web-security",
      "--disable-gpu",
      "--disable-dev-shm-usage",
      "--disable-setuid-sandbox",
      "--no-first-run",
      "--no-sandbox",
      "--no-zygote",
      "--single-process",
    ],
    defaultViewport: chromium.defaultViewport,
    // executablePath: await exePath,
    headless: true,
    // ignoreHTTPSErrors: true,
  });
  // let browser = await origin_puppeteer.launch({
  //   // ignoreDefaultArgs: ["--disable-extensions"],
  //   args: ["--disable-web-security", "--no-sandbox", "--disable-setuid-sandbox"],
  //   defaultViewport: chromium.defaultViewport,
  //   // executablePath: exePath,
  //   headless: true,
  //   ignoreHTTPSErrors: true,
  // });
  const page = await browser.newPage();
  await page.setExtraHTTPHeaders({
    "Accept-Language": "ja-JP",
  });
  await page.setContent(html);
  // PDF作成処理
  let result = await page.pdf(option);
  browser.close();
  return result;
};
